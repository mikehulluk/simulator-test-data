Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> output_expr
Rule 1     output_expr -> array_section
Rule 2     output_expr -> array_section DOT function_name
Rule 3     array_name -> ID
Rule 4     function_name -> ID
Rule 5     array_section -> array_name
Rule 6     empty -> <empty>
Rule 7     slice_number -> NUMBER
Rule 8     slice_number -> empty
Rule 9     array_section -> array_name LSQBRACKET slice_number COLON slice_number RSQBRACKET

Terminals, with rules where they appear

COLON                : 9
DOT                  : 2
ID                   : 3 4
LSQBRACKET           : 9
NUMBER               : 7
RSQBRACKET           : 9
error                : 

Nonterminals, with rules where they appear

array_name           : 5 9
array_section        : 1 2
empty                : 8
function_name        : 2
output_expr          : 0
slice_number         : 9 9

Parsing method: LALR

state 0

    (0) S' -> . output_expr
    (1) output_expr -> . array_section
    (2) output_expr -> . array_section DOT function_name
    (5) array_section -> . array_name
    (9) array_section -> . array_name LSQBRACKET slice_number COLON slice_number RSQBRACKET
    (3) array_name -> . ID

    ID              shift and go to state 1

    output_expr                    shift and go to state 2
    array_name                     shift and go to state 4
    array_section                  shift and go to state 3

state 1

    (3) array_name -> ID .

    LSQBRACKET      reduce using rule 3 (array_name -> ID .)
    DOT             reduce using rule 3 (array_name -> ID .)
    $end            reduce using rule 3 (array_name -> ID .)


state 2

    (0) S' -> output_expr .



state 3

    (1) output_expr -> array_section .
    (2) output_expr -> array_section . DOT function_name

    $end            reduce using rule 1 (output_expr -> array_section .)
    DOT             shift and go to state 5


state 4

    (5) array_section -> array_name .
    (9) array_section -> array_name . LSQBRACKET slice_number COLON slice_number RSQBRACKET

    DOT             reduce using rule 5 (array_section -> array_name .)
    $end            reduce using rule 5 (array_section -> array_name .)
    LSQBRACKET      shift and go to state 6


state 5

    (2) output_expr -> array_section DOT . function_name
    (4) function_name -> . ID

    ID              shift and go to state 7

    function_name                  shift and go to state 8

state 6

    (9) array_section -> array_name LSQBRACKET . slice_number COLON slice_number RSQBRACKET
    (7) slice_number -> . NUMBER
    (8) slice_number -> . empty
    (6) empty -> .

    NUMBER          shift and go to state 9
    COLON           reduce using rule 6 (empty -> .)

    empty                          shift and go to state 10
    slice_number                   shift and go to state 11

state 7

    (4) function_name -> ID .

    $end            reduce using rule 4 (function_name -> ID .)


state 8

    (2) output_expr -> array_section DOT function_name .

    $end            reduce using rule 2 (output_expr -> array_section DOT function_name .)


state 9

    (7) slice_number -> NUMBER .

    RSQBRACKET      reduce using rule 7 (slice_number -> NUMBER .)
    COLON           reduce using rule 7 (slice_number -> NUMBER .)


state 10

    (8) slice_number -> empty .

    RSQBRACKET      reduce using rule 8 (slice_number -> empty .)
    COLON           reduce using rule 8 (slice_number -> empty .)


state 11

    (9) array_section -> array_name LSQBRACKET slice_number . COLON slice_number RSQBRACKET

    COLON           shift and go to state 12


state 12

    (9) array_section -> array_name LSQBRACKET slice_number COLON . slice_number RSQBRACKET
    (7) slice_number -> . NUMBER
    (8) slice_number -> . empty
    (6) empty -> .

    NUMBER          shift and go to state 9
    RSQBRACKET      reduce using rule 6 (empty -> .)

    empty                          shift and go to state 10
    slice_number                   shift and go to state 13

state 13

    (9) array_section -> array_name LSQBRACKET slice_number COLON slice_number . RSQBRACKET

    RSQBRACKET      shift and go to state 14


state 14

    (9) array_section -> array_name LSQBRACKET slice_number COLON slice_number RSQBRACKET .

    DOT             reduce using rule 9 (array_section -> array_name LSQBRACKET slice_number COLON slice_number RSQBRACKET .)
    $end            reduce using rule 9 (array_section -> array_name LSQBRACKET slice_number COLON slice_number RSQBRACKET .)

