load_file("nrngui.hoc")

// Set from the commandline:
GSYN = 1
TCLOSE = 20
ESYN=0
GLEAK = 0.03333

// CONSTANTS
A = 10000


create soma
access soma
soma insert pas

length = 100
soma {
    L = length
    diam = A / (length * PI)
    
    // Make the capacitance very small - so changes are immediate:
    cm = 0.0000001

    //(NEURON works in S/cm2 and mV (LK_G is in mS/cm2) )
    g_pas = GLEAK / 1000
    e_pas = -50
}


objref ic
ic = new IClamp(0.5)
ic.amp = 33.333 * (1e-3)
ic.dur = 20
ic.del=50


objref syn
soma syn = new ExpSyn(0.5)
syn.tau = TCLOSE
syn.e = ESYN



objref nc, nil
nc = new NetCon(nil, syn)
//NEURON deal in uS, we are using nS
nc.weight=GSYN * 1e-3




// Setup the recording:
objref vecv, vect, vec_syni, vec_syng

vect = new Vector()
vecv = new Vector()
vec_syni = new Vector()
vec_syng = new Vector()

vect.record(&t)
vecv.record(&soma.v(0.5))
vec_syni.record(&syn.i)
vec_syng.record(&syn.g)


// Run the simulation:
tstop = 350
dt=0.005

// Setup the simulation:
proc initialise(){
   soma.v = -50
   nc.event(100) 
}
objref fih
fih = new FInitializeHandler("initialise()")



run() 



// Since our conductance and currents are measured in uS and nA, lets convert them to nS and pA
i=0
for i=0, vec_syni.size()-1 {
   vec_syng.x[i] = vec_syng.x[i] * 1e3
   vec_syni.x[i] = vec_syni.x[i] * 1e3
}



strdef filename
sprint(filename,"output/scenario020_ESYN%f_GSYN%f_GLEAK%f_TCLOSE%f_result_", ESYN, GSYN, GLEAK, TCLOSE)


// Save the data to a file:
objref savdata
savdata = new File()
savdata.wopen(filename)
savdata.printf("#t V\n")

objref tempmatrix
tempmatrix = new Matrix()
tempmatrix.resize(vecv.size(),4)
tempmatrix.setcol(0, vect)
tempmatrix.setcol(1, vecv)
tempmatrix.setcol(2, vec_syng)
tempmatrix.setcol(3, vec_syni)
tempmatrix.fprint(0,savdata, " %g")

savdata.close()
