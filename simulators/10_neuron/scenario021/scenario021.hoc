load_file("nrngui.hoc")

// Set from the commandline:
//GSYN = 1000
//TCLOSE = 100000
//TOPEN = 100000
//ESYN= 0
//GLEAK = 0.03333


// CONSTANTS
A = 10000

create soma
access soma
soma insert pas

length = 100
soma {
    L = length
    diam = A / (length * PI)
    cm =1.0 * (1e-3)
    //(NEURON works in S/cm2 and mV (G_LEAK is in mS/cm2) )
    g_pas = GLEAK / 1000
    e_pas = -50
}

objref syn
soma syn = new Exp2Syn(0.5)
syn.tau1 = TOPEN
syn.tau2 = TCLOSE
syn.e = ESYN



objref nc, nil
nc = new NetCon(nil, syn)
//NEURON deal in uS, we are using pS
nc.weight=GSYN / 1e6


proc initspikes(){
   soma.v = -50
   nc.event(100) 
   nc.event(300) 
   nc.event(300) 
}


// Setup the recording:
objref vecv, vect, vec_syni, vec_syng

vect = new Vector()
vecv = new Vector()
vec_syni = new Vector()
vec_syng = new Vector()

vect.record(&t)
vecv.record(&soma.v(0.5))
vec_syni.record(&syn.i)
vec_syng.record(&syn.g)


// Run the simulation:
tstop = 350
dt=0.005

objref fih
fih = new FInitializeHandler("initspikes()")
cvode.atol(1e-12)
cvode.rtol(1e-12)

run() 




for i=0, vec_syni.size()-1 {
    // NEURON works in nA and uS, we want pA and pS, so downscale by 1e3 and 1e6
    vec_syni.x[i] = vec_syni.x[i] * (1e3)
    vec_syng.x[i] = vec_syng.x[i] * (1e6) 
}



strdef filename
sprint(filename,"output/scenario021_ESYN%lf_GSYN%lf_GLEAK%lf_TCLOSE%lf_TOPEN%lf_result_NEURONHOC", ESYN, GSYN, GLEAK, TCLOSE, TOPEN)

// Save the data to a file:
objref savdata
savdata = new File()
savdata.wopen(filename)
savdata.printf("#t V\n")

objref tempmatrix
tempmatrix = new Matrix()
tempmatrix.resize(vecv.size(),4)
tempmatrix.setcol(0, vect)
tempmatrix.setcol(1, vecv)
tempmatrix.setcol(2, vec_syng)
tempmatrix.setcol(3, vec_syni)
tempmatrix.fprint(0,savdata, " %g")

savdata.close()
