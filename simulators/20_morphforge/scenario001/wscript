
import os
import itertools
import numpy as np

import waf_util


@waf_util.chdirdecorator
def generate(ctx):
    my_mf_run()






def _run_sim(GLK_in_mS_per_cm2, EREV_in_mV, I_in_pA, AREA_in_um2, VS_in_mV, C_in_uF_per_cm2):
    import morphforge.stdimports as mf
    import morphforgecontrib.stdimports as mfc
    from morphforge.stdimports import units as U

    # The simulation:
    env = mf.NEURONEnvironment()
    sim = env.Simulation()
    cell = sim.create_cell(area=AREA_in_um2 * U.um2, initial_voltage=VS_in_mV*U.mV)
    lk_chl = env.Channel(mfc.StdChlLeak,
                    conductance=GLK_in_mS_per_cm2 * U.mS/U.cm2,
                    reversalpotential=EREV_in_mV * U.mV )

    cell.apply_channel(lk_chl)
    cell.set_passive(mf.PassiveProperty.SpecificCapacitance, C_in_uF_per_cm2 * U.uF / U.cm2)
    sim.create_currentclamp(cell_location=cell.soma,
                            amp=I_in_pA * U.pA,
                            delay=100*U.ms,
                            dur=150*U.ms)
    v = sim.record(cell)
    res = sim.run()
    v_tr = res.get_trace(v)
    return v_tr


def run_sim(GLK_in_mS_per_cm2, EREV_in_mV, I_in_pA, AREA_in_um2, VS_in_mV, C_in_uF_per_cm2):
    v_tr = _run_sim(GLK_in_mS_per_cm2=GLK_in_mS_per_cm2,
                    EREV_in_mV=EREV_in_mV,
                    I_in_pA=I_in_pA,
                    AREA_in_um2=AREA_in_um2,
                    VS_in_mV=VS_in_mV,
                    C_in_uF_per_cm2=C_in_uF_per_cm2 )
    time = v_tr.time_pts_ms
    data = v_tr.data_pts_in('mV')
    d = np.vstack((time, data)).T
    fname_tmpl = "output/scenario001_A{A}_C{C}_I{I}_GLK{GLK}_EREV{EREV}_VS{VS}_result_morphforge"
    fname = fname_tmpl.format(A=AREA_in_um2,
                              GLK=GLK_in_mS_per_cm2,
                              EREV=EREV_in_mV,
                              I=I_in_pA,
                              VS=VS_in_mV,
                              C=C_in_uF_per_cm2)
    np.savetxt(fname, d)

def my_mf_run():

    Is = [0, 120, 200]
    As = [10000, 16000]
    VSs =[-51, -31]
    EREVs=[-31,-51]
    GLKs =[0.3,1.3]
    Cs = [1.0,2.0]

    for (A,C,I,GLK,EREV,VS) in itertools.product(As,Cs,Is,GLKs,EREVs,VSs):
        run_sim(GLK_in_mS_per_cm2=GLK, EREV_in_mV=EREV, I_in_pA=I, AREA_in_um2=A, VS_in_mV=VS, C_in_uF_per_cm2=C )
        
        if waf_util.is_short_run():
            break



    # We ran fine :)
    print 'MF-RUN! OK'
